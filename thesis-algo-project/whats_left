whats left on the thesis as of march 30th

understand how to adapt payoff_set + spot_set + info_set in the context of two assets (be inspired by vanilla context)
understand very well the shapes of the training / testing sets used for vanillas (for train_test_split)
apply those differences to the algo for two assets -> to produce coherent and usable data sets that are to be fed to the algo

make some trial-and-error to adapt the algo to two underlyings
on the main algo part for the moment, dont think we will touch layer generator (still dont know)

make some research on Heston calibration! (it would be so ideal to produce our own parameters)
that is something we can do here at work
Very well explained Heston calibration (paper sure, code maybe) : https://github.com/KNFO-MIMUW/Heston_model/tree/d41addfb99c4381a9200fdf9693cea62b6b03464

need to make more research on the use of deep learning algo to support the production of two output parameters (i think it is the correct way to view the problem of
optimization when confronted to multiple underlying options)

https://machinelearningmastery.com/deep-learning-models-for-multi-output-regression/
it appears simple and natively built in keras -> but still not completly sure it is the way to view the problem

more math research on Heston calibration
https://www.degruyter.com/document/doi/10.1515/math-2017-0058/html?lang=en

initial citation for heston calibration
https://perswww.kuleuven.be/~u0009713/ScSiTi03.pdf

avancée au dimanche 03/04
on bosse maintenant sur la vraie partie finale: créer un algo qui soit capable de process un input 2-dim et sortir un output à 2-dim (les deux param de delta-hedging)
https://www.relataly.com/time-series-forecasting-multi-step-regression-using-neural-networks-with-multiple-outputs-in-python/5800/
article qui m'a l'air vachement sympa sur le sujet

# original two-dimensional output -> strat_helper of dimension (None, 2)

delta_1, delta_2 = tf.split(strat_helper, num_or_size_splits=2, axis=1)

# expected result of the split
# delta_1 is of shape (None, 1)
# delta_2 is of shape (None, 1)
# and hopefully they can then be used
